[ { "title": "[MP] LAB1-2: 코드작성 PART2 및 전체코드", "url": "/posts/MP_Lab1-2/", "categories": "STUDY, LAB", "tags": "matlab, machine_perception, acoustic_signal", "date": "2022-03-19 23:00:00 +0800", "snippet": "본 파트에서는 오디오를 재생함과 동시에 현재 재생되는 부분의 Time &amp; Frequency Domain 파형을 실시간으로 보여주는 기능을 구현합니다. 이 기능을 구현하기까지 얼마나 많은 시도가 있었는지 모른다… 처음에는 sound(audio,fs)함수를 통해 오디오를 재생하고 loop를 사용해 plot; drawnow; 구문을 반복해서 실행시켜 그래프를 주기적으로 업데이트해주는 방법을 사용했으나 재생시간과 반복문이 돌아가는 시간이 맞지 않아 포기했다. 반복문안의 코드가 너무 빨리 실행되어 그런가 해서 wait함수도 사용해보고 별 짓을 다 했지만 실시간으로 파형을 보여주는 기능을 만들지 못했다.그래서 생각해낸 것이 timer을 사용하는 것이다… timer은 시간을 세면서 일정 함수나 동작을 주기적으로 실행시킬 수 있다. timerFcn이라는 속성에 원하는 함수를 지정시켜주고 start(timer)만 해주면 완성이다.audioplayer이라는 객체에도 비슷한 기능이 있으나 잘 작동되지 않아 어쩔 수 없이 timer을 사용했다. 이하 본문에서는 어떻게 timer을 사용하는지 timerFcn에는 어떤 함수를 사용했는지에 대해 다룬다.코드작성 PART2 전역변수 사용 global audio;global fs; 위의 코드를 pushbutton 1과 2에 해당하는 함수 제일 앞부분에 넣으면 됩니다. 오디오 파일을 다시 가져와 읽지 않고 첫번째 버튼에서 audioread 함수를 통해 얻은 오디오 신호 audio 와 샘플 레이트 fs를 전역변수로 정의하여 두번재 버튼에서도 사용할 수 있게 합니다. audioplayer 객체 player = audioplayer(audio,fs); [audioplayer에 대한 MATLAB 공식 문서] “audioplayer 객체를 사용하여 오디오 데이터를 재생합니다. 이 객체는 재생 중에 추가적인 유연성을 제공하는 속성을 포함합니다. 예를 들어, audioplayer 객체 함수를 사용하여 재생을 일시 중지하거나, 재개하거나, 콜백을 정의할 수 있습니다.” 이 객체의 속성 중 하나인 CurrentSample을 통해 현재 재생 중인 샘플을 받아올 수 있습니다. 이를 활용하여 실시간으로 바뀌는 파형을 만듭니다. 기타 변수 정의 frame_len = 0.1; % 프레임길이: 0.1sylim = max(abs(audio)); % 신호의 절대값의 최대값, time domain 파형의 y축 범위를 위함half_frame = round(frame_len*fs/2); % time domain 파형의 x 축 길이의 절반에 해당하는 샘플 크기 조금 후에 다시 설명할 것이지만 timer을 사용하여 파형을 그리는 함수를 주기적으로 실행시킵니다. frame_len은 그 주기이자 화면에 표시할 프레임의 길이라고 보면 됩니다. frame_len=0.1s 일 때 (frame_len*fs)는 0.1초에 해당하는 오디오 신호의 길이입니다. 매 0.1초마다 현재 재생되는 샘플로부터 좌우로 각각 0.05s초의 신호를 time domain 파형을 생성하려고 합니다. 이 때 0.05s초에 해당하는 샘플의 길이가 바로 half_frame이라고 생각하시면 됩니다. 아래의 결과를 보시면 이해가 더 쉬울 것 같습니다. 현재 재생되고 있는 샘플의 위치는 x축의 중심인 56.125초이라 했을 때 좌우로 각각 0.05초씩 나타내어 56.075~56.175까지 총 0.1s초에 해당하는 신호를 그래프로 나타낸다 보시면 됩니다. 오디오 재생 pause(frame_len); play(player); 프레임 길이만큼 멈추었다가 오디오를 재생합니다. timer 정의 및 실행 my_Timer = timer('StartDelay',0,'TimerFcn',@(~,~) audio_plot(player,half_frame,ylim,handles),'BusyMode','drop','ExecutionMode','fixedSpacing','Period',frame_len);start(my_Timer) % 타이머 시작pause(length(audio)/fs+2) % 오디오 재생을 마칠때까지 타이머를 삭제하지 않고 기다림delete(my_Timer) % 타이머 삭제 [timer에 대한 MATLAB 공식 문서] “timer 객체를 사용하여 MATLAB® 명령을 한 번 또는 여러 번 실행하도록 예약합니다. 여러 번 실행하도록 타이머를 예약하는 경우, 실행 간격과 대기 충돌을 처리하는 방법을 정의할 수 있습니다.timer 객체는 콜백 함수를 사용하여 명령을 실행합니다. 콜백 함수는 일부 이벤트 도중 코드를 실행합니다. timer 객체의 경우, 콜백 함수를 함수 핸들 또는 문자형 벡터로 지정할 수 있습니다. 콜백 함수가 문자형 벡터이면 MATLAB은 콜백 함수가 실행 가능한 코드인 것으로 간주하고 실행합니다. 타이머가 시작(StartFcn), 실행(TimerFcn) 또는 중지(StopFcn)되거나 타이머에서 오류가 발생(ErrorFcn)할 경우 timer 객체는 콜백 함수를 지원합니다.” timer객체 생성시 입력하는 변수 중 홀수 는 입력인수의 이름을 나타내고 짝수 는 그에 해당하는 값을 나타냅니다. e.g.) ‘StarDelay’의 값은 0 ‘timerFcn’, @(~,~) audio_plot(player,half_frame,ylim,handles)을 통해 주기적으로 실행할 함수를 정해주었습니다. ‘Period’,frame_len을 통해 TimerFcn 실행 간 지연 시간(단위: 초)을 지정했습니다. 실행되는 주기라고 생각하셔도 됩니다. audio_plot 함수 정의하기 function audio_plot(player,half_frame,ylim,handles)global audio;global fs;% 현재 재생 중인 샘플이 0.05초이하 혹은 오디오 끝 -0.05 일 때 처리l = max(1,player.CurrentSample - half_frame); r = min(length(audio),player.CurrentSample + half_frame);frame = audio(l:r); % l부터 r까지의 신호t = ([l:r]-1)/fs; % l~r의 신호의 정의역을 초(s) 단위로 바꿔줌if l==1 frame = [zeros(1,r-l+1),frame]; t = [(2*l-r-1:l-1)/fs,t];endif r==length(audio) frame = [frame,zeros(1,r-l+1)]; t = [t,(r+1:2*r-l+1)/fs];end% time domain 파형axes(handles.axes3) plot(t,frame); set(gca,'xlim',[t(1) t(end)],'ylim',[-ylim ylim]);xlabel('时间(s)'); ylabel('幅值');% frequency domain 파형axes(handles.axes4) len = length(frame); % 신호길이 mag = abs(fftshift(fft(frame))); % 频谱幅度|F(e^jw)|mag = mag/max(mag); % normalizingf = [0:len/2]*fs/len; % frequecy의 절반인 [0:fs/2]으로 전체 주파수 영역을 타나낼 수 있음plot(f,mag(round(len/2):len));xlabel('频率(Hz)'); ylabel('幅值'); 오디오 재생을 시작하고 0.05초 이하일때 player.CurrentSample은 half_frame 보다 작은 값을 가지게 됩니다. 이 때 player.CurrentSample - half_frame는 마이너스 값을 가지게 되어 의미가 사라지게 됩니다. 따라서 행렬의 첫번째 위치인 1부터 신호를 읽을 수 있게 합니다. 전체 코드[Github에서 확인하기]NEXT POSTING[실험결과 및 분석]" }, { "title": "[MP] LAB1-1: GUI 설계 및 코드작성 PART1", "url": "/posts/MP_Lab1-1/", "categories": "STUDY, LAB", "tags": "matlab, machine_perception, gui, acoustic_signal", "date": "2022-03-19 04:00:00 +0800", "snippet": "GUI 설계 读取文件 버튼: 클릭 시 오디오 파일을 선택하는 창이 뜨며 선택 후 Axes1과 Axes2에 각각 时域图와 时频图를 보여줌 播放声音 버튼: 클릭 시 오디오 파일을 재생하며 Axes3과 Axes4에 각각 时域波形과 频域波形을 실시간으로 보여줌버튼 두개에 해당하는 코드를 각각의 파트로 나누어 이번 파트에서는 첫번째 버튼과 관련된 기능에 대해서 다룹니다코드작성 PART1 MATLAB 명령 창에 “help 함수이름”을 입력해서 함수 사용방법을 확인할 수 있습니다 오디오 파일 선택하기 [file,~] = uigetfile(); 오디오 파일 읽기 [audio,fs] = audioread(file);audio = audio(:,1); audioread() 는 오디오 파일을 읽어와 샘플링된 데이터 audio와 이 데이터의 샘플 레이트 fs를 반환합니다.어떤 오디오 파일들은 channel이 두개여서 audio 데이터가 nx2인 행렬로 반환될 때가 있습니다. 데이터를 처리하게 편하게 audio 데이터를 nx1 행렬로 만들어줍니다.오디오 음향효과에 영향을 미치지 않습니다 Axes1에 时域图 생성하기 axes(handles.axes1) t = (0:length(audio)-1)/fs; % 시간축plot(t,audio); % 플롯 생성xlabel('时间(s)'); ylabel('幅度'); axes(handles.좌표축태그) 를 통해 plot을 생성할 좌표축을 선택해줍니다. Axes2에 时频图 생성하기 axes(handles.axes2)nw = 128; % 세그먼트 샘플 길이window = hamming(nw); % 해밍윈도우 적용noverlap = 120; % 중첩샘플수nfft = 2^nextpow2(length(window)); % DFT적용 지점수spectrogram(audio,window,noverlap,nfft,fs,'yaxis'); % 스펙트로그램 생성xlabel('时间(s)'); ylabel('频率(Hz)'); [spectrogram에 대한 MATLAB 공식 문서] nw와 noverlap의 값을 변경해도 되지만 (nw &gt; noverlap) 을 만족해야 합니다. 이는 각 변수의 의미와 관련되어 있습니다. nw 는 세그먼트 샘플 길이로 spectrogram 함수는 신호를 길이가 nw 인 섹션으로 나눈 후 STFT를 적용합니다. noverlap 은 중첩되는 샘플수로 noverap=0일 경우에는 섹션끼리 중첩되지 않고 [1:nw]에 대한 STFT가 끝나면 바로 [nw+1:nw+nw]에 대해 STFT를 적용합니다. noverlap가 nw보다 작고 0이 아닌 수일 경우 섹션끼리 중첩되는 부분이 생겨 [1:nw]이 끝나면 [1+(nw -noverlap):2nw-noverlap]섹션에 대해 STFT를 적용합니다. 즉 (nw - noverlap) 간격으로 푸리에 변환을 적용합니다. 값을 반환하지 않게 하고 yaxis 속성을 추가하면 오디오 신호에 대한 스펙토그램이 자동으로 생성됩니다. NEXT POSTING[코드작성 PART2로 时域波形과 频域波形을 실시간으로 보여주는 기능을 구현합니다]" }, { "title": "[MP] LAB1-0: 실험내용 및 요구사항", "url": "/posts/MP_Lab1-0/", "categories": "STUDY, LAB", "tags": "matlab, machine_perception", "date": "2022-03-17 04:00:00 +0800", "snippet": "LAB1: Acoustic Signal Processing실험목적오디오 신호의 Time &amp; Frequency Domain 에 대해 알아봄실험원리 audioread(): 오디오 파일 읽기 fft(): Fourier Transform spectrogram(): 단시간 푸리에 변환(STFT) 사용하는 3차원(time,frequency,power)의 스펙트로그램을 사용하여 时频分析 을 진행함실험요구 GUI를 통해 앱 구현 오디오 파일 선택 기능 오디오 재생 기능 Time &amp; Frequency Domain 분석 기능 오디오 재생과 동시에 해당 시각에 해당하는 Time &amp; Frequency Domain의 파형을 실시간으로 나타내기 (애니매이션 효과) 간단한 요구 사항만 있을 뿐 GUI의 형태와 실험결과가 정해져있지 않습니다.NEXT POSTINGGUI 설계 및 코드작성 PART1" }, { "title": "[MP] LAB0: GUI 사용법", "url": "/posts/MP_Lab0/", "categories": "STUDY, LAB", "tags": "matlab, machine_perception, gui", "date": "2022-03-17 04:00:00 +0800", "snippet": "모든 실험은 MATLAB의 GUI 앱을 사용하여 사용자가 동적으로 코드를 실행시킬 수 있게 합니다.GUI란?MATLAB 공식문서에 따르면 “앱이라고도 부르는 GUI(그래픽 사용자 인터페이스)는 소프트웨어 응용 프로그램에 대한 포인트 앤 클릭 컨트롤을 제공하여, 응용 프로그램을 실행하기 위해 다른 사람이 언어를 배우거나 명령을 입력할 필요가 없습니다. 앱을 공유하여 MATLAB 안에서 사용하거나 독립형 데스크탑 또는 웹 앱으로서 공유할 수도 있습니다.”간단히 말하자면 개발자가 아닌 사용자가 간편하게 버튼을 클릭하거나 값을 입력하여 제가 만든 코드를 동적으로 실행시킬 수 있는 앱입니다.사용방법 명령 창에 guide 를 입력GUIDE는 추후에 사라질 예정이라 appdesigner이라는 새로운 앱 설계 서비스를 사용하셔도 됩니다. 사용방법 역시 명령창에 appdesigner을 입력하시면 됩니다. 아래와 같은 창이 나오면 성공 좌측의 사이드바에서 원하는 동작을 선택해서 추가할 수 있습니다.e.g.) 버튼을 선택 후 오른쪽 격자에 드래그하면 원하는 위치에 원하는 크기의 버튼을 추가할 수 있습니다. 버튼: 버튼을 클릭함으로 함수를 동작하게 할 수 있습니다. 좌표축: plot등의 함수를 사용하여 여러가지 그래프를 띄울 수 있는 화면입니다. … 기타 동작들은 직접 사용하시면서 익히시면 되겠습니다. 생성된 동작을 더블클릭 하여 inspector 창을 띄운 후 세부변수들을 수정할 수 있습니다. 예를들어 버튼에 표시되는 문자를 string 변수 값을 수정함으로 바꿀 수 있습니다. 원하는 UI를 설계하고 완성했다면 원하는 이름으로 저장하시면 됩니다. 저장하게 되면 지정한 이름의 여러가지 함수를 포함한 (.m)파일과 (.fig)형식의 파일이 생성됩니다. 가장 중요한 부분은 (.m)파일에서 우리가 추가한 버튼 과 같은 동작과 관련된 함수일 것입니다. function pushbutton1_Callback(hObject, eventdata, handles) 이 함수 안에서 원하는 동작을 작성한 후 실행하면 첫번째 버튼 클릭 시 함수안에 있는 코드가 작동되게 됩니다. NEXT POSTING첫번째 실험에 관한 내용과 구현방법을 다룰 예정입니다." }, { "title": "[MP] Machine Perception Intro", "url": "/posts/MP_Intro/", "categories": "STUDY, LAB", "tags": "matlab, machine_perception", "date": "2022-03-17 04:00:00 +0800", "snippet": "소개북경대학교 2022년도 본과 수업 Laboratory Course of Machine Perception 에 기초한 포스팅입니다.내용총 7개의 실험을 포함하고 있으며 크게 오디오 신호처리와 이미지 처리로 나눌 수 있습니다. 세부적으로는 아래 내용을 포함합니다. Digital Signal Processing Acoustic Signal Processing Image Signal Processing the programming technology for Android system주의사항본 포스팅의 내용은 신호와 시스템 에 대한 기본적인 배경지식을 전제로 하기에 fft의 원리와 같은 기초적인 내용은 다루지 않을 예정입니다.또한 모든 실험은 MATLAB에서 이루어지니 MATLAB 언어에 대한 기본적인 숙지를 필요로 합니다. 모든 코드를 직접 쓰고 포스팅 내용 또한 저의 이해를 바탕으로 작성한 것이기에 오류가 있을 수 있으니 참고 부탁드립니다!" } ]
